/*
 * This file was generated by qdbusxml2cpp-fix version 0.8
 * Command line was: qdbusxml2cpp-fix -c Audio -p generated/com_deepin_daemon_audio ../xml/com.deepin.daemon.Audio.xml
 *
 * qdbusxml2cpp-fix is Copyright (C) 2016 Deepin Technology Co., Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef COM_DEEPIN_DAEMON_AUDIO_H
#define COM_DEEPIN_DAEMON_AUDIO_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

#include <DBusExtendedAbstractInterface>
#include <QtDBus/QtDBus>


/*
 * Proxy class for interface com.deepin.daemon.Audio
 */
class __AudioPrivate;
class __Audio : public DBusExtendedAbstractInterface
{
    Q_OBJECT

public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.daemon.Audio"; }

public:
    explicit __Audio(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~__Audio();

    Q_PROPERTY(QString BluetoothAudioMode READ bluetoothAudioMode NOTIFY BluetoothAudioModeChanged)
    QString bluetoothAudioMode();

    Q_PROPERTY(QStringList BluetoothAudioModeOpts READ bluetoothAudioModeOpts NOTIFY BluetoothAudioModeOptsChanged)
    QStringList bluetoothAudioModeOpts();

    Q_PROPERTY(QString Cards READ cards NOTIFY CardsChanged)
    QString cards();

    Q_PROPERTY(QString CardsWithoutUnavailable READ cardsWithoutUnavailable NOTIFY CardsWithoutUnavailableChanged)
    QString cardsWithoutUnavailable();

    Q_PROPERTY(QDBusObjectPath DefaultSink READ defaultSink NOTIFY DefaultSinkChanged)
    QDBusObjectPath defaultSink();

    Q_PROPERTY(QDBusObjectPath DefaultSource READ defaultSource NOTIFY DefaultSourceChanged)
    QDBusObjectPath defaultSource();

    Q_PROPERTY(bool IncreaseVolume READ increaseVolume WRITE setIncreaseVolume NOTIFY IncreaseVolumeChanged)
    bool increaseVolume();
    void setIncreaseVolume(bool value);

    Q_PROPERTY(double MaxUIVolume READ maxUIVolume NOTIFY MaxUIVolumeChanged)
    double maxUIVolume();

    Q_PROPERTY(bool ReduceNoise READ reduceNoise WRITE setReduceNoise NOTIFY ReduceNoiseChanged)
    bool reduceNoise();
    void setReduceNoise(bool value);

    Q_PROPERTY(QList<QDBusObjectPath> SinkInputs READ sinkInputs NOTIFY SinkInputsChanged)
    QList<QDBusObjectPath> sinkInputs();

    Q_PROPERTY(QList<QDBusObjectPath> Sinks READ sinks NOTIFY SinksChanged)
    QList<QDBusObjectPath> sinks();

    Q_PROPERTY(QList<QDBusObjectPath> Sources READ sources NOTIFY SourcesChanged)
    QList<QDBusObjectPath> sources();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> IsPortEnabled(uint in0, const QString &in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("IsPortEnabled"), argumentList);
    }



    inline QDBusPendingReply<> Reset()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Reset"), argumentList);
    }

    inline void ResetQueued()
    {
        QList<QVariant> argumentList;

        CallQueued(QStringLiteral("Reset"), argumentList);
    }


    inline QDBusPendingReply<> SetBluetoothAudioMode(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetBluetoothAudioMode"), argumentList);
    }

    inline void SetBluetoothAudioModeQueued(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);

        CallQueued(QStringLiteral("SetBluetoothAudioMode"), argumentList);
    }


    inline QDBusPendingReply<> SetDefaultSink(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetDefaultSink"), argumentList);
    }

    inline void SetDefaultSinkQueued(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);

        CallQueued(QStringLiteral("SetDefaultSink"), argumentList);
    }


    inline QDBusPendingReply<> SetDefaultSource(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetDefaultSource"), argumentList);
    }

    inline void SetDefaultSourceQueued(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);

        CallQueued(QStringLiteral("SetDefaultSource"), argumentList);
    }


    inline QDBusPendingReply<> SetPort(uint in0, const QString &in1, int in2)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1) << QVariant::fromValue(in2);
        return asyncCallWithArgumentList(QStringLiteral("SetPort"), argumentList);
    }

    inline void SetPortQueued(uint in0, const QString &in1, int in2)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1) << QVariant::fromValue(in2);

        CallQueued(QStringLiteral("SetPort"), argumentList);
    }


    inline QDBusPendingReply<> SetPortEnabled(uint in0, const QString &in1, bool in2)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1) << QVariant::fromValue(in2);
        return asyncCallWithArgumentList(QStringLiteral("SetPortEnabled"), argumentList);
    }

    inline void SetPortEnabledQueued(uint in0, const QString &in1, bool in2)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1) << QVariant::fromValue(in2);

        CallQueued(QStringLiteral("SetPortEnabled"), argumentList);
    }



Q_SIGNALS: // SIGNALS
    void PortEnabledChanged(uint in0, const QString &in1, bool in2);
    // begin property changed signals
    void BluetoothAudioModeChanged(const QString & value) const;
    void BluetoothAudioModeOptsChanged(const QStringList & value) const;
    void CardsChanged(const QString & value) const;
    void CardsWithoutUnavailableChanged(const QString & value) const;
    void DefaultSinkChanged(const QDBusObjectPath & value) const;
    void DefaultSourceChanged(const QDBusObjectPath & value) const;
    void IncreaseVolumeChanged(bool  value) const;
    void MaxUIVolumeChanged(double  value) const;
    void ReduceNoiseChanged(bool  value) const;
    void SinkInputsChanged(const QList<QDBusObjectPath> & value) const;
    void SinksChanged(const QList<QDBusObjectPath> & value) const;
    void SourcesChanged(const QList<QDBusObjectPath> & value) const;

public Q_SLOTS:
    void CallQueued(const QString &callName, const QList<QVariant> &args);

private Q_SLOTS:
    void onPendingCallFinished(QDBusPendingCallWatcher *w);
    void onPropertyChanged(const QString &propName, const QVariant &value);

private:
    __AudioPrivate *d_ptr;
};

namespace com {
  namespace deepin {
    namespace daemon {
      typedef ::__Audio Audio;
    }
  }
}
#endif
