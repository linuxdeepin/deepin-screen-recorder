/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -N -p utils_interface -c utils_interface ./com.deepin.daemon.Audio.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef UTILS_INTERFACE_H
#define UTILS_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.deepin.daemon.Audio
 */
class utils_interface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.daemon.Audio"; }

public:
    utils_interface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~utils_interface();

    Q_PROPERTY(QString BluetoothAudioMode READ bluetoothAudioMode)
    inline QString bluetoothAudioMode() const
    { return qvariant_cast< QString >(property("BluetoothAudioMode")); }

    Q_PROPERTY(QStringList BluetoothAudioModeOpts READ bluetoothAudioModeOpts)
    inline QStringList bluetoothAudioModeOpts() const
    { return qvariant_cast< QStringList >(property("BluetoothAudioModeOpts")); }

    Q_PROPERTY(QString Cards READ cards)
    inline QString cards() const
    { return qvariant_cast< QString >(property("Cards")); }

    Q_PROPERTY(QString CardsWithoutUnavailable READ cardsWithoutUnavailable)
    inline QString cardsWithoutUnavailable() const
    { return qvariant_cast< QString >(property("CardsWithoutUnavailable")); }

    Q_PROPERTY(QDBusObjectPath DefaultSink READ defaultSink)
    inline QDBusObjectPath defaultSink() const
    { return qvariant_cast< QDBusObjectPath >(property("DefaultSink")); }

    Q_PROPERTY(QDBusObjectPath DefaultSource READ defaultSource)
    inline QDBusObjectPath defaultSource() const
    { return qvariant_cast< QDBusObjectPath >(property("DefaultSource")); }

    Q_PROPERTY(bool IncreaseVolume READ increaseVolume WRITE setIncreaseVolume)
    inline bool increaseVolume() const
    { return qvariant_cast< bool >(property("IncreaseVolume")); }
    inline void setIncreaseVolume(bool value)
    { setProperty("IncreaseVolume", QVariant::fromValue(value)); }

    Q_PROPERTY(double MaxUIVolume READ maxUIVolume)
    inline double maxUIVolume() const
    { return qvariant_cast< double >(property("MaxUIVolume")); }

    Q_PROPERTY(bool ReduceNoise READ reduceNoise WRITE setReduceNoise)
    inline bool reduceNoise() const
    { return qvariant_cast< bool >(property("ReduceNoise")); }
    inline void setReduceNoise(bool value)
    { setProperty("ReduceNoise", QVariant::fromValue(value)); }

    Q_PROPERTY(QList<QDBusObjectPath> SinkInputs READ sinkInputs)
    inline QList<QDBusObjectPath> sinkInputs() const
    { return qvariant_cast< QList<QDBusObjectPath> >(property("SinkInputs")); }

    Q_PROPERTY(QList<QDBusObjectPath> Sinks READ sinks)
    inline QList<QDBusObjectPath> sinks() const
    { return qvariant_cast< QList<QDBusObjectPath> >(property("Sinks")); }

    Q_PROPERTY(QList<QDBusObjectPath> Sources READ sources)
    inline QList<QDBusObjectPath> sources() const
    { return qvariant_cast< QList<QDBusObjectPath> >(property("Sources")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> IsPortEnabled(uint in0, const QString &in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("IsPortEnabled"), argumentList);
    }

    inline QDBusPendingReply<> Reset()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Reset"), argumentList);
    }

    inline QDBusPendingReply<> SetBluetoothAudioMode(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetBluetoothAudioMode"), argumentList);
    }

    inline QDBusPendingReply<> SetDefaultSink(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetDefaultSink"), argumentList);
    }

    inline QDBusPendingReply<> SetDefaultSource(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetDefaultSource"), argumentList);
    }

    inline QDBusPendingReply<> SetPort(uint in0, const QString &in1, int in2)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1) << QVariant::fromValue(in2);
        return asyncCallWithArgumentList(QStringLiteral("SetPort"), argumentList);
    }

    inline QDBusPendingReply<> SetPortEnabled(uint in0, const QString &in1, bool in2)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1) << QVariant::fromValue(in2);
        return asyncCallWithArgumentList(QStringLiteral("SetPortEnabled"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void PortEnabledChanged(uint in0, const QString &in1, bool in2);
};

#endif
